version: "3.7"
services:
  orchestrator-db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=tester
      - POSTGRES_PASSWORD=tester
      - POSTGRES_DB=test_law
    ports:
      - 5435:5432
    volumes:
      - orchestrator-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d test_law -U tester"]
      interval: 10s
      timeout: 5s
      retries: 5

  orchestrator-service:
    build: ./orchestrator
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./orchestrator:/orchestra
    ports:
      - 8000:8000
    env_file:
      - ./orchestrator/.env.dev
    depends_on:
      orchestrator-db:
        condition: service_healthy

  orchestrator-backup-service:
    build: ./orchestrator
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./orchestrator:/orchestra
    ports:
      - 8005:8000
    env_file:
      - ./orchestrator/.env.dev
    depends_on:
      orchestrator-db:
        condition: service_healthy

  menu-db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=menu1234
      - POSTGRES_PASSWORD=menu1234
      - POSTGRES_DB=menu
    ports:
      - 5432:5432
    volumes:
      - menu-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d menu -U menu1234"]
      interval: 10s
      timeout: 5s
      retries: 5

  menu-service:
    build:
      context: ./menu
      dockerfile: Dockerfile
    ports:
      - 8001:3000
    depends_on:
      menu-db:
        condition: service_healthy

  coupon-db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=law_coupon_service
    ports:
      - 5433:5432
    volumes:
      - coupon-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d law_coupon_service -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  coupon-service:
    build:
      context: ./coupon
      dockerfile: Dockerfile
    ports:
      - 8002:8080
    depends_on:
      coupon-db:
        condition: service_healthy

  order-db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=order
      - POSTGRES_PASSWORD=order
      - POSTGRES_DB=order
    ports:
      - 5434:5432
    volumes:
      - order-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d order -U order"]
      interval: 10s
      timeout: 5s
      retries: 5
 
  order-service:
    build: ./order
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./order:/code
    ports:
      - 8003:8000
    env_file:
      - ./order/.env
    depends_on:
      order-db:
        condition: service_healthy

  frontend-service:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    depends_on:
      - orchestrator-service

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - 8080:80
    restart: unless-stopped
    depends_on:
      - orchestrator-db
      - menu-db
      - coupon-db

  nginx:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    restart: 'always'
    depends_on: 
      - orchestrator-service
      - orchestrator-backup-service
      - menu-service
      - order-service
      - coupon-service
      - frontend-service

volumes:
  orchestrator-db-data:
  coupon-db-data:
  order-db-data:
  menu-db-data:
  pgadmin:
